{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "85ef5e50",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import math\n",
    "%matplotlib inline "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "515610b4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        City\n",
      "0     London\n",
      "1      Paris\n",
      "2  Amsterdam\n",
      "3     Athens\n",
      "4  Barcelona\n",
      "5     Berlin\n",
      "6   Budapest\n",
      "7     Lisbon\n",
      "8       Rome\n",
      "9     Vienna\n",
      "deleted 1\n",
      "realSum                       float64\n",
      "room_type                       int64\n",
      "room_shared                     int64\n",
      "room_private                    int64\n",
      "person_capacity                 int64\n",
      "host_is_superhost               int64\n",
      "multi                           int64\n",
      "biz                             int64\n",
      "cleanliness_rating              int64\n",
      "guest_satisfaction_overall      int64\n",
      "bedrooms                        int64\n",
      "dist                          float64\n",
      "metro_dist                    float64\n",
      "attr_index                    float64\n",
      "attr_index_norm               float64\n",
      "rest_index                    float64\n",
      "rest_index_norm               float64\n",
      "City_Amsterdam                  uint8\n",
      "City_Athens                     uint8\n",
      "City_Barcelona                  uint8\n",
      "City_Berlin                     uint8\n",
      "City_Budapest                   uint8\n",
      "City_Lisbon                     uint8\n",
      "City_London                     uint8\n",
      "City_Rome                       uint8\n",
      "City_Vienna                     uint8\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "amsterdam_weekdays = pd.read_csv('CombinedCityDATA.csv')\n",
    "####################\n",
    "# DATA CLEANING\n",
    "# 1. need to change all bools to 0 and 1\n",
    "# 2. change room_type to entire room/apt\n",
    "# 3. Changing city names\n",
    "# 3. Delete Unecessary stuff\n",
    "# 4. Maximum 'realSum' is 4000\n",
    "####################\n",
    "\n",
    "amsterdam_weekdays.dtypes\n",
    "#amsterdam_weekdays.room_type\n",
    "\n",
    "#1. changing booleans\n",
    "amsterdam_weekdays['room_shared'] = amsterdam_weekdays['room_shared'].astype(int)\n",
    "amsterdam_weekdays['room_private'] = amsterdam_weekdays['room_private'].astype(int)\n",
    "amsterdam_weekdays['host_is_superhost'] = amsterdam_weekdays['host_is_superhost'].astype(int)\n",
    "\n",
    "#2. room_type\n",
    "amsterdam_weekdays['room_type'] = amsterdam_weekdays['room_type'].apply(lambda x: 1 if x.strip().lower() == 'entire home/apt' else 0)\n",
    "amsterdam_weekdays['room_type'].info\n",
    "\n",
    "#3. changing City names\n",
    "\n",
    "df = pd.DataFrame({\n",
    "    'City': ['London', 'Paris', 'Amsterdam', 'Athens', 'Barcelona', 'Berlin', 'Budapest', 'Lisbon', 'Rome', 'Vienna']\n",
    "})\n",
    "\n",
    "# apply one-hot encoding using get_dummies\n",
    "one_hot_df = pd.get_dummies(amsterdam_weekdays['city'], prefix='City')\n",
    "\n",
    "# concatenate the one-hot-encoded columns with the original DataFrame\n",
    "amsterdam_weekdays = pd.concat([amsterdam_weekdays, one_hot_df], axis=1)\n",
    "\n",
    "# drop the original 'City' column\n",
    "amsterdam_weekdays.drop('city', axis=1, inplace=True)\n",
    "\n",
    "print(df)\n",
    "\n",
    "\n",
    "\n",
    "#3. Delete -> as it's just the serial number\n",
    "del amsterdam_weekdays['Unnamed: 0']\n",
    "del amsterdam_weekdays['lng']\n",
    "del amsterdam_weekdays['lat']\n",
    "del amsterdam_weekdays['City_Paris']\n",
    "\n",
    "\n",
    "#4. Max price : 4000\n",
    "\n",
    "maximum = amsterdam_weekdays['realSum'] > 4000\n",
    "if any(maximum):\n",
    "    amsterdam_weekdays = amsterdam_weekdays[~maximum]\n",
    "    print(\"deleted 1\")\n",
    "\n",
    "print(amsterdam_weekdays.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "fa4acb4e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 22264 entries, 21451 to 20713\n",
      "Data columns (total 25 columns):\n",
      " #   Column                      Non-Null Count  Dtype  \n",
      "---  ------                      --------------  -----  \n",
      " 0   room_type                   22264 non-null  int64  \n",
      " 1   room_shared                 22264 non-null  int64  \n",
      " 2   room_private                22264 non-null  int64  \n",
      " 3   person_capacity             22264 non-null  int64  \n",
      " 4   host_is_superhost           22264 non-null  int64  \n",
      " 5   multi                       22264 non-null  int64  \n",
      " 6   biz                         22264 non-null  int64  \n",
      " 7   cleanliness_rating          22264 non-null  int64  \n",
      " 8   guest_satisfaction_overall  22264 non-null  int64  \n",
      " 9   bedrooms                    22264 non-null  int64  \n",
      " 10  dist                        22264 non-null  float64\n",
      " 11  metro_dist                  22264 non-null  float64\n",
      " 12  attr_index                  22264 non-null  float64\n",
      " 13  attr_index_norm             22264 non-null  float64\n",
      " 14  rest_index                  22264 non-null  float64\n",
      " 15  rest_index_norm             22264 non-null  float64\n",
      " 16  City_Amsterdam              22264 non-null  uint8  \n",
      " 17  City_Athens                 22264 non-null  uint8  \n",
      " 18  City_Barcelona              22264 non-null  uint8  \n",
      " 19  City_Berlin                 22264 non-null  uint8  \n",
      " 20  City_Budapest               22264 non-null  uint8  \n",
      " 21  City_Lisbon                 22264 non-null  uint8  \n",
      " 22  City_London                 22264 non-null  uint8  \n",
      " 23  City_Rome                   22264 non-null  uint8  \n",
      " 24  City_Vienna                 22264 non-null  uint8  \n",
      "dtypes: float64(6), int64(10), uint8(9)\n",
      "memory usage: 3.1 MB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<bound method DataFrame.info of        room_type  room_shared  room_private  person_capacity  \\\n",
       "21451          0            0             1                2   \n",
       "13384          0            0             1                2   \n",
       "5042           0            0             1                2   \n",
       "20897          1            0             0                2   \n",
       "15121          1            0             0                5   \n",
       "...          ...          ...           ...              ...   \n",
       "5197           0            0             1                2   \n",
       "10015          1            0             0                3   \n",
       "1780           1            0             0                2   \n",
       "5892           0            0             1                2   \n",
       "20713          1            0             0                5   \n",
       "\n",
       "       host_is_superhost  multi  biz  cleanliness_rating  \\\n",
       "21451                  0      0    1                   9   \n",
       "13384                  0      0    0                  10   \n",
       "5042                   0      0    0                  10   \n",
       "20897                  0      0    0                  10   \n",
       "15121                  0      1    0                  10   \n",
       "...                  ...    ...  ...                 ...   \n",
       "5197                   0      0    0                   9   \n",
       "10015                  0      1    0                   9   \n",
       "1780                   1      0    1                  10   \n",
       "5892                   1      0    1                  10   \n",
       "20713                  0      1    0                   9   \n",
       "\n",
       "       guest_satisfaction_overall  bedrooms  ...  rest_index_norm  \\\n",
       "21451                          93         1  ...        20.405311   \n",
       "13384                         100         1  ...         4.370420   \n",
       "5042                           98         1  ...        24.396305   \n",
       "20897                          98         1  ...        13.501083   \n",
       "15121                          90         1  ...        12.459859   \n",
       "...                           ...       ...  ...              ...   \n",
       "5197                           95         1  ...        24.678943   \n",
       "10015                          84         1  ...        25.970033   \n",
       "1780                           98         1  ...         8.311050   \n",
       "5892                           99         1  ...        45.115417   \n",
       "20713                          85         1  ...        18.861637   \n",
       "\n",
       "       City_Amsterdam  City_Athens  City_Barcelona  City_Berlin  \\\n",
       "21451               0            0               0            0   \n",
       "13384               0            0               0            0   \n",
       "5042                0            0               0            1   \n",
       "20897               0            0               0            0   \n",
       "15121               0            0               0            0   \n",
       "...               ...          ...             ...          ...   \n",
       "5197                0            0               0            1   \n",
       "10015               0            0               0            0   \n",
       "1780                0            1               0            0   \n",
       "5892                0            0               0            1   \n",
       "20713               0            0               0            0   \n",
       "\n",
       "       City_Budapest  City_Lisbon  City_London  City_Rome  City_Vienna  \n",
       "21451              0            0            0          1            0  \n",
       "13384              0            0            1          0            0  \n",
       "5042               0            0            0          0            0  \n",
       "20897              0            0            0          1            0  \n",
       "15121              0            0            1          0            0  \n",
       "...              ...          ...          ...        ...          ...  \n",
       "5197               0            0            0          0            0  \n",
       "10015              0            1            0          0            0  \n",
       "1780               0            0            0          0            0  \n",
       "5892               0            0            0          0            0  \n",
       "20713              0            0            0          1            0  \n",
       "\n",
       "[22264 rows x 25 columns]>"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# RANDOM FOREST AND GRADIENT BOOSTED\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(\n",
    "    amsterdam_weekdays.drop(columns=['realSum']),amsterdam_weekdays['realSum'], \n",
    "                                                                   test_size = 0.15, \n",
    "                                                                   random_state=1984)\n",
    "X_train.info()\n",
    "Y_test.head()\n",
    "\n",
    "X_train.info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "f5d77e7a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R-squared value: 0.10707648778564816\n"
     ]
    }
   ],
   "source": [
    "#KNN\n",
    "from sklearn.neighbors import KNeighborsRegressor # KNeighborsClassifier is the KNN machine learning algorithem\n",
    "KNN = KNeighborsRegressor(n_neighbors=1000)\n",
    "KNN.fit(X_train,Y_train)\n",
    "# Predict using the trained model on the test data\n",
    "y_pred = KNN.predict(X_test)\n",
    "\n",
    "# Calculate R-squared value\n",
    "from sklearn.metrics import r2_score\n",
    "r2 = r2_score(Y_test, y_pred)\n",
    "print(\"R-squared value:\", r2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "1d9944ac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6282733852318634\n"
     ]
    }
   ],
   "source": [
    "#RANDOMFORESTCLASSIFIER\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "forest = RandomForestRegressor(random_state=0, n_estimators=200)\n",
    "forest.fit(X_train,Y_train)\n",
    "y_pred = forest.predict(X_test)\n",
    "r2 = r2_score(Y_test, y_pred)\n",
    "print(r2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "e37ef5fa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "score of gbtree in training data is 0.5884251669106131\n",
      "score of gbtree in testing data is 0.6048215409394773\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkoAAAHFCAYAAAANLdYJAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAADnU0lEQVR4nOz9d5xcd33vjz9PmT6zs31XK626XCUXDBa2kxjjRjGGcIMD/sWxCQk1cE25ufhCEnOTawcnF+4lEOB+E0zHCQRIwImxAGNwNzayLVu2tLLKattsm15O/f1xZkbbZpt2tbPa9/PxWFs7e3b2M6d8Pq/Puyqu67oIgiAIgiAI01BXegCCIAiCIAj1igglQRAEQRCEGohQEgRBEARBqIEIJUEQBEEQhBqIUBIEQRAEQaiBCCVBEARBEIQaiFASBEEQBEGogQglQRAEQRCEGohQEgRBEARBqIEIJUGoA5599lne9a53sW3bNkKhEKFQiB07dvCe97yHX//616dsHLfffjuKokx6bfPmzdxyyy3L+ncfeeQRbr/9dpLJ5LyOr4yz8qWqKuvWreMNb3gDDz/88LKOdT709/dz++23s3fv3mk/m+kcnyqmnrepX0eOHFmRcQlCPaOv9AAEYa3z5S9/mT/90z/lzDPP5L/+1//Kueeei6Io7N+/n+985zu86lWvoqenh23btq3I+H7wgx/Q0NCwrH/jkUce4VOf+hS33HILjY2N8/69++67j3g8juM4HDt2jLvuuovXvOY1PP7447ziFa9YvgHPQX9/P5/61KfYvHkzF1xwwaSf/fEf/zGve93rVmZgZSrnbSrr1q1bgdEIQn0jQkkQVpCHH36Y97///bzxjW/ke9/7Hn6/v/qz1772tXzgAx/gu9/9LqFQaNb3yefzhMPhZRnjhRdeuCzvuxRcdNFFtLa2AnDppZdy8cUXs23bNr73ve+tqFCajQ0bNrBhw4YVHcPE8zZfbNvGsiwCgcC0ny3F/VcoFOa8zwVhJRDXmyCsIHfccQeapvHlL395kkiayNve9ja6urqq399yyy1Eo1Gee+45rrnmGmKxGFdeeSUAe/bs4c1vfjMbNmwgGAyyfft23vOe9zAyMjLtfe+9914uuOACAoEAW7Zs4e/+7u9m/Pszud7S6TQf+9jH2LJlC36/n/Xr13PrrbeSy+UmHacoCn/6p3/KN77xDc4++2zC4TDnn38+P/7xj6vH3H777fy3//bfANiyZUvVDfSLX/xizvM3lYqVxOfzTXr92LFj/MEf/AHt7e0EAgHOPvts/vf//t84jjPpuLGxMd7//vezfv16/H4/W7du5ROf+ASlUmnScd/97nfZvXs38XiccDjM1q1b+aM/+iMAfvGLX/CqV70KgHe+853Vz3P77bdXP+9M7s3rrruO++67j1e84hWEQiHOOussvvKVr0z7jA899BCXXHIJwWCQ9evX8+d//uf84z/+45K6zo4cOYKiKNx111389V//NVu2bCEQCPDAAw9Ux//000/ze7/3ezQ1NVWtncVikdtuu23SffGBD3xgmku18nm///3vc+GFFxIMBvnUpz4157kVhJVALEqCsELYts0DDzzAK1/5ygW7PAzD4Prrr+c973kPH//4x7EsC4BDhw5xySWX8Md//MfE43GOHDnCZz7zGX7rt36L5557riogfvazn/HmN7+ZSy65hHvuuQfbtrnrrrsYGhqa82/n83kuv/xyjh8/zv/4H/+D8847j+eff56/+Iu/4LnnnuOnP/3pJCFw77338uSTT/I//+f/JBqNctddd/G7v/u7vPTSS2zdupU//uM/ZmxsjL//+7/n+9//fvVcnHPOOfM6h5ZlVV1vn/zkJwkEAvze7/1e9Zjh4WEuvfRSDMPgr/7qr9i8eTM//vGP+djHPsahQ4f4h3/4B8Bb5K+44goOHTrEpz71Kc477zx+9atfceedd7J3717uvfdeAB599FF+//d/n9///d/n9ttvJxgMcvToUX7+858D8IpXvIK7776bd77znXzyk5/kjW98I8CcVqRnnnmGj370o3z84x+no6ODf/zHf+Rd73oX27dv53d+53cAL5bt6quv5owzzuBrX/sa4XCYL33pS3zzm9+c81zNdN4moigKmqZNeu1zn/scZ5xxBn/3d39HQ0MDO3bs4LHHHgPgrW99K29/+9t573vfSy6Xw3Vd3vKWt/Czn/2M2267jd/+7d/m2Wef5S//8i959NFHefTRRydZo55++mn279/PJz/5SbZs2UIkEpnz3ArCiuAKgrAiDA4OuoD79re/fdrPLMtyTdOsfjmOU/3ZzTff7ALuV77ylVnf33Ec1zRN9+jRoy7g/tu//Vv1Z7t373a7urrcQqFQfS2dTrvNzc3u1Glh06ZN7s0331z9/s4773RVVXWffPLJScd973vfcwH3P/7jP6qvAW5HR4ebTqcnfW5VVd0777yz+trf/u3fuoB7+PDhWT9Thb/8y790gWlfDQ0N7ve///1Jx3784x93Affxxx+f9Pr73vc+V1EU96WXXnJd13W/9KUvuYD7L//yL5OO+/SnP+0C7v333++6ruv+3d/9nQu4yWSy5viefPJJF3DvvvvummOfyKZNm9xgMOgePXq0+lqhUHCbm5vd97znPdXX3va2t7mRSMQdHh6uvmbbtnvOOefM6/zVOm+Au23btupxhw8frr5mGMaM7/EXf/EXk16/7777XMC96667Jr3+z//8zy7g/r//9/8mfV5N06rnvsJ8zq0gnGrE9SYIdchFF12Ez+erfv3v//2/px3zX/7Lf5n2WiKR4L3vfS/d3d3ouo7P52PTpk0A7N+/H4BcLseTTz7JW9/6VoLBYPV3Y7EYb3rTm+Yc249//GN27tzJBRdcgGVZ1a9rr712RpfZFVdcQSwWq37f0dFBe3s7R48ende5mI2f/vSnPPnkkzzxxBP8+Mc/5qqrruLtb387P/jBD6rH/PznP+ecc87h4osvnvS7t9xyC67rVq0VP//5z4lEIpOsUZXjwLPCAVW32g033MC//Mu/0NfXd9KfA+CCCy5g48aN1e+DwSBnnHHGpPP04IMP8trXvnZSfJGqqtxwww0L+luV8zbx64c//OG0466//vppbswKU++/ynmc6qZ929veRiQSqZ6/Cueddx5nnHHGpNeW69wKwskgrjdBWCFaW1sJhUIzCoZvf/vb5PN5BgYGuP7666f9PBwOT8tEcxyHa665hv7+fv78z/+cXbt2EYlEcByHV7/61RQKBQDGx8dxHIfOzs5p7zvTa1MZGhqip6en5gI6NR6qpaVl2jGBQKA6npPh/PPPnyQaXv/617Nr1y4+8IEP8Lu/+7sAjI6Osnnz5mm/W4n7Gh0drf6/s7NzWvxQe3s7uq5Xj/ud3/kdfvjDH/K5z32OP/zDP6RUKnHuuefyiU98gne84x2L/izzOU+jo6N0dHRMO26m12Zj6nmrxWwu4ak/Gx0dRdd12traJr2uKAqdnZ3V8zfbey/XuRWEk0GEkiCsEJqm8drXvpb777+fgYGBSQtHJT6nVnDuTHV49u3bxzPPPMNXv/pVbr755urrPT09k45rampCURQGBwenvcdMr02lIvBmCjSu/HylUFWVc889l+9+97skEgna29tpaWlhYGBg2rH9/f3AifG2tLTw+OOP47rupPObSCSwLGvS53rzm9/Mm9/8ZkqlEo899hh33nknN954I5s3b+aSSy5Zts/X0tIyYxzZfK7bYpit3tPUn7W0tGBZFsPDw5PEkuu6DA4OVq1Fc733Sp1bQaiFuN4EYQW57bbbsG2b9773vZimeVLvVVl4pqZvf/nLX570fSQS4eKLL+b73/8+xWKx+nomk+FHP/rRnH/nuuuu49ChQ7S0tPDKV75y2tdM1pu5qIz5ZK1Mtm3z3HPPEQgEqha3K6+8khdeeIGnn3560rFf//rXURSFK664onpcNpud5oL6+te/Xv35TOO+/PLL+fSnPw3Ab37zmyX9PFO5/PLL+fnPfz7Jauc4Dt/97neX9O8shsr5mRpY/q//+q/kcrkZz99s1Dq3gnCqEYuSIKwgl112GV/4whf44Ac/yCte8Qre/e53c+6556KqKgMDA/zrv/4rwLwKPp511lls27aNj3/847iuS3NzMz/60Y/Ys2fPtGP/6q/+ite97nVcffXVfPSjH8W2bT796U8TiUQYGxub9e/ceuut/Ou//iu/8zu/w4c//GHOO++8atbZ/fffz0c/+lF27969oPOwa9cuAP7v//2/3Hzzzfh8Ps4888xJsU0z8dRTT1VLAgwNDfGVr3yFF198kQ9/+MPV+KsPf/jDfP3rX+eNb3wj//N//k82bdrEvffeyz/8wz/wvve9rxon84d/+Id84Qtf4Oabb+bIkSPs2rWLhx56iDvuuIM3vOENXHXVVQD8xV/8BcePH+fKK69kw4YNJJNJ/u///b/4fD4uv/xygGqF9W9961ucffbZRKNRurq6JpV5WAyf+MQn+NGPfsSVV17JJz7xCUKhEF/60peqZRlUdX5734nnbSLnnHPOoouLXn311Vx77bX89//+30mn01x22WXVrLcLL7yQm266ac73mM+5FYRTzsrGkguC4Lquu3fvXved73ynu2XLFjcQCLjBYNDdvn27+4d/+Ifuz372s0nH3nzzzW4kEpnxfV544QX36quvdmOxmNvU1OS+7W1vc48dO+YC7l/+5V9OOvbf//3f3fPOO8/1+/3uxo0b3b/5m7+pmZE1MevNdV03m826n/zkJ90z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29uB87Mv57axzvnUl0EQ8LWvfY1SqcSNN954Xvbj3DbWOV/68f3vfz+ve93r+I3f+I1Zr6+1vlSb4q4BJiYmCIKAnp6eWa/39PQwMjKySme1dF72spfx3/7bf+Piiy9mdHSU//gf/yM33XQTzzzzTOP8F2rb0aNHARgZGcG2bdra2uYds1bbv1LtGhkZobu7e973d3d3r4m233nnnbzlLW9h8+bNHD58mE996lPcdtttPPHEEziOs+7aKITgvvvu4+Uvfzm7du1qnB+cP325UBvh/OnLffv2ceONN1KtVkmlUnzrW9/isssua0x850M/LtZGOH/68Wtf+xpPPvkkjz/++Lz31tozqYTSGkLTtFn/L4SY99pa5M4772z8+4orruDGG29k+/btfPWrX20EGZ5O29ZD+1eiXQsdv1ba/ta3vrXx7127dnHttdeyefNmvve97/HmN7950c+t1TZ+4AMf4Ne//jU/+9nP5r13vvTlYm08X/py586dPP3002SzWb7xjW9w991389BDDy16fuuxHxdr42WXXXZe9OPg4CAf/vCHefDBB4nFYoset1b6Urne1gCdnZ0YhjFP4Y6Njc1T1OuBZDLJFVdcwYEDBxrZbydrW29vL67rMj09vegxa42Valdvby+jo6Pzvn98fHxNtr2vr4/Nmzdz4MABYH218YMf/CDf+c53+NGPfsSGDRsar59PfblYGxdivfalbdvs2LGDa6+9ls997nNceeWV/Jf/8l/Oq35crI0LsR778YknnmBsbIw9e/ZgmiamafLQQw/xZ3/2Z5im2TiHtdKXSiitAWzbZs+ePezdu3fW63v37uWmm25apbM6fWq1Gs899xx9fX1s3bqV3t7eWW1zXZeHHnqo0bY9e/ZgWdasY4aHh9m/f/+abf9KtevGG28kl8vxi1/8onHMY489Ri6XW5Ntn5ycZHBwkL6+PmB9tFEIwQc+8AG++c1v8sMf/pCtW7fOev986MtTtXEh1mNfLoQQglqtdl7042LU27gQ67EfX/3qV7Nv3z6efvrpxt+1117LO97xDp5++mm2bdu2tvpyyWHfirNKvTzAl7/8ZfHss8+Ke++9VySTSXHkyJHVPrVT8tGPflT8+Mc/FocOHRKPPvqoeP3rXy/S6XTj3D//+c+LTCYjvvnNb4p9+/aJu+66a8E0zw0bNogf/OAH4sknnxS33XbbqpcHKBQK4qmnnhJPPfWUAMQXvvAF8dRTTzVKNqxUu1772teK3bt3i0ceeUQ88sgj4oorrjhnabona2OhUBAf/ehHxcMPPywOHz4sfvSjH4kbb7xRDAwMrKs2/v7v/77IZDLixz/+8ayU6nK53Dhmvfflqdp4vvTlJz7xCfGTn/xEHD58WPz6178Wn/zkJ4Wu6+LBBx8UQqz/fjxVG8+XflyI5qw3IdZWXyqhtIb4i7/4C7F582Zh27a45pprZqX2rmXq9S0syxL9/f3izW9+s3jmmWca74dhKD796U+L3t5e4TiOeOUrXyn27ds36zsqlYr4wAc+INrb20U8Hhevf/3rxbFjx851U2bxox/9SADz/u6++24hxMq1a3JyUrzjHe8Q6XRapNNp8Y53vENMT0+vehvL5bK4/fbbRVdXl7AsS2zatEncfffd885/rbdxofYB4oEHHmgcs9778lRtPF/68t/8m3/TGCO7urrEq1/96oZIEmL996MQJ2/j+dKPCzFXKK2lvtSEEGLp9ieFQqFQKBSKCwcVo6RQKBQKhUKxCEooKRQKhUKhUCyCEkoKhUKhUCgUi6CEkkKhUCgUCsUiKKGkUCgUCoVCsQhKKCkUCoVCoVAsghJKCoVCoVAoFIughJJCoVAoFArFIiihpFAo1jT33HMPb3rTm1bku7Zs2cIXv/jFFfkuhUJxYaCEkkKhUCgUCsUiKKGkUCjWDbfeeisf+tCH+NjHPkZ7ezu9vb185jOfmXXMZz7zGTZt2oTjOPT39/OhD32o8dmjR4/ykY98BE3T0DQNkLuv33XXXWzYsIFEIsEVV1zB3//93y/7d7PZLO95z3vo6ekhFouxa9cuvvvd7zbef/jhh3nlK19JPB5n48aNfOhDH6JUKq38RVIoFCuKEkoKhWJd8dWvfpVkMsljjz3Gf/7P/5n777+fvXv3AvC//tf/4k//9E/50pe+xIEDB/j2t7/NFVdcAcA3v/lNNmzYwP3338/w8DDDw8MAVKtV9uzZw3e/+13279/Pe97zHt75znfy2GOPLfl3wzDkzjvv5OGHH+Z//I//wbPPPsvnP/95DMMAYN++fdxxxx28+c1v5te//jVf//rX+dnPfsYHPvCBc3XZFArFaaI2xVUoFGuae+65h2w2y7e//W1uvfVWgiDgpz/9aeP966+/nttuu43Pf/7zfOELX+BLX/oS+/fvx7Ksed+1ZcsW7r33Xu69996T/ubrXvc6Lr30Uv74j/8Y4JS/++CDD3LnnXfy3HPPcfHFF8/7vn/9r/818XicL33pS43Xfvazn3HLLbdQKpWIxWLLvSwKheIcoSxKCoViXbF79+5Z/9/X18fY2BgAb3nLW6hUKmzbto13v/vdfOtb38L3/ZN+XxAEfPazn2X37t10dHSQSqV48MEHOXbs2JJ/9+mnn2bDhg0LiiSAJ554gq985SukUqnG3x133EEYhhw+fHhZ7VcoFOcWc7VPQKFQKJbDXEuRpmmEYQjAxo0beeGFF9i7dy8/+MEPeN/73scf/dEf8dBDDy1oYQL4kz/5E/70T/+UL37xi1xxxRUkk0nuvfdeXNdd8u/G4/GTnnMYhvze7/1eI16qmU2bNp28wQqFYlVRQkmhUJxXxONx3vCGN/CGN7yB97///VxyySXs27ePa665Btu2CYJg1vE//elPeeMb38jv/M7vAFLUHDhwgEsvvXTJv7l7926OHz/Oiy++uKBV6ZprruGZZ55hx44dZ9Y4hUJxzlGuN4VCcd7wla98hS9/+cvs37+fQ4cO8d//+38nHo+zefNmQMYo/eQnP+HEiRNMTEwAsGPHDvbu3cvDDz/Mc889x+/93u8xMjKyrN+95ZZbeOUrX8m/+lf/ir1793L48GH+6Z/+ie9///sA/Lt/9+945JFHeP/738/TTz/NgQMH+M53vsMHP/jBlb0ACoVixVFCSaFQnDe0trbyN3/zN9x8883s3r2bf/mXf+Ef/uEf6OjoAOD+++/nyJEjbN++na6uLgA+9alPcc0113DHHXdw66230tvbe1oFLr/xjW9w3XXXcdddd3HZZZfxsY99rGG92r17Nw899BAHDhzgFa94BVdffTWf+tSn6OvrW7G2KxSKs4PKelMoFAqFQqFYBGVRUigUCoVCoVgEJZQUCoVCoVAoFkEJJYVCoVAoFIpFUEJJoVAoFAqFYhGUUFIoFAqFQqFYBCWUFAqFQqFQKBZBCSWFQqFQKBSKRVBCSaFQKBQKhWIRlFBSKBQKhUKhWAQllBQKhUKhUCgWQQklhUKhUCgUikVQQkmhUCgUCoViEf5/clXe2032nEkAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Gradient Boosting\n",
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "gbtree = GradientBoostingRegressor(learning_rate=0.2, max_depth=2, random_state=1984)\n",
    "gbtree.fit(X_train,Y_train)\n",
    "gbtree_score_test=gbtree.score(X_test, Y_test)\n",
    "gbtree_score_train=gbtree.score(X_train, Y_train)\n",
    "print (\"score of gbtree in training data is \" + str(gbtree_score_train))\n",
    "print (\"score of gbtree in testing data is \" + str(gbtree_score_test))\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Gene\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Generate predictions on the test set\n",
    "y_pred = gbtree.predict(X_test)\n",
    "\n",
    "# Calculate the errors as the difference between the true and predicted prices\n",
    "errors = Y_test - y_pred\n",
    "\n",
    "# Create a scatter plot of the errors\n",
    "plt.scatter(range(len(errors)), errors, alpha=0.5)\n",
    "\n",
    "# Add a horizontal line at y=0 to indicate zero error\n",
    "plt.axhline(y=0, color='r', linestyle='-')\n",
    "\n",
    "# Add axis labels and a title\n",
    "plt.xlabel('Instance')\n",
    "plt.ylabel('Error')\n",
    "plt.title('Gradient Boosting Errors')\n",
    "\n",
    "# Display the plot\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "075225c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Decision Tree\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "tree=DecisionTreeRegressor( random_state=1984)\n",
    "tree.fit(X_train, Y_train)\n",
    "\n",
    "train_score = tree.score(X_train, Y_train)\n",
    "test_score = tree.score(X_test, Y_test)\n",
    "print (\"The score of the DT model in training dataset is equal to: \"+str(train_score))\n",
    "print (\"The score of the DT model in testing dataset is equal to: \"+str(test_score))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "c08083b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " the intercept is -103.62001596651714\n",
      " the coeffiients are [ 1.03711503e+02 -9.47178067e+01 -8.99369616e+00  2.93626756e+01\n",
      " -9.20935359e-01  2.07091238e+01  3.80870812e+01  1.10308958e+01\n",
      "  3.19103618e-01  7.41637967e+01 -2.80862905e-01 -8.23632111e+00\n",
      " -1.10940789e-01  7.11673818e+00  5.27383266e-02 -5.75727946e-01\n",
      "  2.58231992e+02 -2.31226367e+02 -2.93073653e+01 -7.02170094e+01\n",
      " -2.01947532e+02 -1.04479025e+02 -3.13151455e+01 -1.54292043e+02\n",
      " -1.23590175e+02]\n",
      " the R_sqaured value is 0.47572736446906194\n"
     ]
    }
   ],
   "source": [
    "# Linear Regression\n",
    "\n",
    "from sklearn.linear_model import LinearRegression \n",
    "OLS = LinearRegression()\n",
    "OLS.fit(X_train, Y_train)\n",
    "#display the intercept and coefficient\n",
    "print(\" the intercept is \" +  str(OLS.intercept_))\n",
    "print(\" the coeffiients are \" +  str(OLS.coef_))\n",
    "print(\" the R_sqaured value is \" +  str(OLS.score(X_train, Y_train)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "3d20a5a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1000x500 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#predicting with OLS\n",
    "y_pred = OLS.predict(X_test[-10:])\n",
    "\n",
    "# Create a DataFrame with predicted and actual values for the last 10 rows\n",
    "performance = pd.DataFrame({'PREDICTIONS': y_pred, 'ACTUAL VALUES':Y_test[-10:]})\n",
    "#performance['error'] = performance['ACTUAL VALUES'] - performance['PREDICTIONS']\n",
    "\n",
    "# Plot a bar graph of predicted and actual values for the last 10 rows\n",
    "plt.figure(figsize=(10, 5))\n",
    "performance.plot(kind='bar', title='Actual vs. Predicted Values', rot=0)\n",
    "plt.xlabel('Airbnb')\n",
    "plt.ylabel('Values')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "31d5a4ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1000x500 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#predicting with OLS\n",
    "y_pred = OLS.predict(X_test[:10])\n",
    "\n",
    "# Create a DataFrame with predicted and actual values for the first 10 rows\n",
    "performance = pd.DataFrame({'PREDICTIONS': y_pred, 'ACTUAL VALUES':Y_test[:10]})\n",
    "\n",
    "# Calculate errors\n",
    "performance['error'] = performance['ACTUAL VALUES'] - performance['PREDICTIONS']\n",
    "\n",
    "# Plot a bar graph of predicted and actual values for the first 10 rows\n",
    "plt.figure(figsize=(10, 5))\n",
    "performance[['ACTUAL VALUES', 'PREDICTIONS']].plot(kind='bar', title='Actual vs. Predicted Values', rot=0)\n",
    "plt.xlabel('Airbnb')\n",
    "plt.ylabel('Values')\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "e17d68a4",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "array length 7 does not match index length 3929",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/n2/tjkny83s6vv2353dkdjnr36w0000gn/T/ipykernel_78607/1465585640.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mperformance\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'PREDICTIONS'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'ACTUAL VALUES'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mY_test\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;31m# Sort performance DataFrame by absolute error in ascending order\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mperformance_sorted\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mperformance\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0massign\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mabs_error\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mperformance\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'error'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mabs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msort_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'abs_error'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# Select top 5 rows\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, index, columns, dtype, copy)\u001b[0m\n\u001b[1;32m    634\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    635\u001b[0m             \u001b[0;31m# GH#38939 de facto copy defaults to False only in non-dict cases\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 636\u001b[0;31m             \u001b[0mmgr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict_to_mgr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtyp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmanager\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    637\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMaskedArray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    638\u001b[0m             \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmrecords\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mmrecords\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36mdict_to_mgr\u001b[0;34m(data, index, columns, dtype, typ, copy)\u001b[0m\n\u001b[1;32m    500\u001b[0m         \u001b[0;31m# TODO: can we get rid of the dt64tz special case above?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    501\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 502\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marrays_to_mgr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtyp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtyp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconsolidate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    503\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    504\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36marrays_to_mgr\u001b[0;34m(arrays, columns, index, dtype, verify_integrity, typ, consolidate)\u001b[0m\n\u001b[1;32m    118\u001b[0m         \u001b[0;31m# figure out the index, if necessary\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    119\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mindex\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 120\u001b[0;31m             \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_extract_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    121\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    122\u001b[0m             \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36m_extract_index\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m    686\u001b[0m                         \u001b[0;34mf\"length {len(index)}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    687\u001b[0m                     )\n\u001b[0;32m--> 688\u001b[0;31m                     \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    689\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    690\u001b[0m                 \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdefault_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlengths\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: array length 7 does not match index length 3929"
     ]
    }
   ],
   "source": [
    "performance = pd.DataFrame({'PREDICTIONS': y_pred, 'ACTUAL VALUES':Y_test})\n",
    "# Sort performance DataFrame by absolute error in ascending order\n",
    "performance_sorted = performance.assign(abs_error=performance['error'].abs()).sort_values('abs_error')\n",
    "\n",
    "# Select top 5 rows\n",
    "top_5 = performance_sorted.head(5)\n",
    "\n",
    "# Plot a bar graph of predicted and actual values for the top 5 rows\n",
    "plt.figure(figsize=(10, 5))\n",
    "top_5.plot(kind='bar', title='Actual vs. Predicted Values (Top 5)', rot=0)\n",
    "plt.xlabel('Airbnb')\n",
    "plt.ylabel('Values')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "923a2902",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>PREDICTIONS</th>\n",
       "      <th>ACTUAL VALUES</th>\n",
       "      <th>error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>194.962945</td>\n",
       "      <td>121.856912</td>\n",
       "      <td>-73.106033</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>420.825325</td>\n",
       "      <td>228.882706</td>\n",
       "      <td>-191.942619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>270.173803</td>\n",
       "      <td>215.725901</td>\n",
       "      <td>-54.447902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>66.633652</td>\n",
       "      <td>84.363397</td>\n",
       "      <td>17.729745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>285.416727</td>\n",
       "      <td>203.976124</td>\n",
       "      <td>-81.440602</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index  PREDICTIONS  ACTUAL VALUES       error\n",
       "0      0   194.962945     121.856912  -73.106033\n",
       "1      1   420.825325     228.882706 -191.942619\n",
       "2      2   270.173803     215.725901  -54.447902\n",
       "3      3    66.633652      84.363397   17.729745\n",
       "4      4   285.416727     203.976124  -81.440602"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#preparing data for plotting\n",
    "performance.reset_index(drop=True, inplace=True) #inplace turns into a column\n",
    "performance.reset_index(inplace=True)\n",
    "performance.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "52f39ba9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>         <td>realSum</td>     <th>  R-squared:         </th>  <td>   0.476</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th>  <td>   0.475</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th>  <td>   840.8</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Thu, 27 Apr 2023</td> <th>  Prob (F-statistic):</th>   <td>  0.00</td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>09:50:04</td>     <th>  Log-Likelihood:    </th> <td>-1.4516e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td> 22264</td>      <th>  AIC:               </th>  <td>2.904e+05</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td> 22239</td>      <th>  BIC:               </th>  <td>2.906e+05</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>    24</td>      <th>                     </th>      <td> </td>     \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>      <td> </td>     \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "               <td></td>                 <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                      <td>  -77.7150</td> <td>   11.449</td> <td>   -6.788</td> <td> 0.000</td> <td> -100.156</td> <td>  -55.274</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>room_type</th>                  <td>   77.8065</td> <td>    5.237</td> <td>   14.857</td> <td> 0.000</td> <td>   67.541</td> <td>   88.071</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>room_shared</th>                <td> -120.6228</td> <td>   10.486</td> <td>  -11.504</td> <td> 0.000</td> <td> -141.175</td> <td> -100.070</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>room_private</th>               <td>  -34.8987</td> <td>    5.223</td> <td>   -6.682</td> <td> 0.000</td> <td>  -45.136</td> <td>  -24.661</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>person_capacity</th>            <td>   29.3627</td> <td>    1.221</td> <td>   24.043</td> <td> 0.000</td> <td>   26.969</td> <td>   31.756</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>host_is_superhost</th>          <td>   -0.9209</td> <td>    2.706</td> <td>   -0.340</td> <td> 0.734</td> <td>   -6.226</td> <td>    4.384</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>multi</th>                      <td>   20.7091</td> <td>    2.836</td> <td>    7.303</td> <td> 0.000</td> <td>   15.151</td> <td>   26.267</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>biz</th>                        <td>   38.0871</td> <td>    2.890</td> <td>   13.180</td> <td> 0.000</td> <td>   32.423</td> <td>   43.751</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>cleanliness_rating</th>         <td>   11.0309</td> <td>    1.660</td> <td>    6.646</td> <td> 0.000</td> <td>    7.777</td> <td>   14.284</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>guest_satisfaction_overall</th> <td>    0.3191</td> <td>    0.182</td> <td>    1.750</td> <td> 0.080</td> <td>   -0.038</td> <td>    0.676</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>bedrooms</th>                   <td>   74.1638</td> <td>    2.244</td> <td>   33.044</td> <td> 0.000</td> <td>   69.765</td> <td>   78.563</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>dist</th>                       <td>   -0.2809</td> <td>    0.883</td> <td>   -0.318</td> <td> 0.750</td> <td>   -2.011</td> <td>    1.449</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>metro_dist</th>                 <td>   -8.2363</td> <td>    1.649</td> <td>   -4.995</td> <td> 0.000</td> <td>  -11.469</td> <td>   -5.004</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>attr_index</th>                 <td>   -0.1109</td> <td>    0.015</td> <td>   -7.239</td> <td> 0.000</td> <td>   -0.141</td> <td>   -0.081</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>attr_index_norm</th>            <td>    7.1167</td> <td>    0.330</td> <td>   21.573</td> <td> 0.000</td> <td>    6.470</td> <td>    7.763</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>rest_index</th>                 <td>    0.0527</td> <td>    0.007</td> <td>    7.873</td> <td> 0.000</td> <td>    0.040</td> <td>    0.066</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>rest_index_norm</th>            <td>   -0.5757</td> <td>    0.162</td> <td>   -3.556</td> <td> 0.000</td> <td>   -0.893</td> <td>   -0.258</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>City_Amsterdam</th>             <td>  258.2320</td> <td>    7.049</td> <td>   36.636</td> <td> 0.000</td> <td>  244.416</td> <td>  272.048</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>City_Athens</th>                <td> -231.2264</td> <td>    6.784</td> <td>  -34.085</td> <td> 0.000</td> <td> -244.523</td> <td> -217.930</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>City_Barcelona</th>             <td>  -29.3074</td> <td>    7.114</td> <td>   -4.120</td> <td> 0.000</td> <td>  -43.251</td> <td>  -15.364</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>City_Berlin</th>                <td>  -70.2170</td> <td>    7.278</td> <td>   -9.648</td> <td> 0.000</td> <td>  -84.482</td> <td>  -55.953</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>City_Budapest</th>              <td> -201.9475</td> <td>    5.836</td> <td>  -34.605</td> <td> 0.000</td> <td> -213.386</td> <td> -190.509</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>City_Lisbon</th>                <td> -104.4790</td> <td>    5.607</td> <td>  -18.633</td> <td> 0.000</td> <td> -115.470</td> <td>  -93.488</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>City_London</th>                <td>  -31.3151</td> <td>    5.922</td> <td>   -5.288</td> <td> 0.000</td> <td>  -42.924</td> <td>  -19.707</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>City_Rome</th>                  <td> -154.2920</td> <td>    6.344</td> <td>  -24.320</td> <td> 0.000</td> <td> -166.727</td> <td> -141.857</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>City_Vienna</th>                <td> -123.5902</td> <td>    6.377</td> <td>  -19.380</td> <td> 0.000</td> <td> -136.090</td> <td> -111.090</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>26318.654</td> <th>  Durbin-Watson:     </th>  <td>   1.999</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th>  <td> 0.000</td>   <th>  Jarque-Bera (JB):  </th> <td>5568216.397</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>           <td> 6.073</td>   <th>  Prob(JB):          </th>  <td>    0.00</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>       <td>79.517</td>   <th>  Cond. No.          </th>  <td>4.71e+15</td>  \n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The smallest eigenvalue is 7.72e-22. This might indicate that there are<br/>strong multicollinearity problems or that the design matrix is singular."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                realSum   R-squared:                       0.476\n",
       "Model:                            OLS   Adj. R-squared:                  0.475\n",
       "Method:                 Least Squares   F-statistic:                     840.8\n",
       "Date:                Thu, 27 Apr 2023   Prob (F-statistic):               0.00\n",
       "Time:                        09:50:04   Log-Likelihood:            -1.4516e+05\n",
       "No. Observations:               22264   AIC:                         2.904e+05\n",
       "Df Residuals:                   22239   BIC:                         2.906e+05\n",
       "Df Model:                          24                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================================\n",
       "                                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "----------------------------------------------------------------------------------------------\n",
       "const                        -77.7150     11.449     -6.788      0.000    -100.156     -55.274\n",
       "room_type                     77.8065      5.237     14.857      0.000      67.541      88.071\n",
       "room_shared                 -120.6228     10.486    -11.504      0.000    -141.175    -100.070\n",
       "room_private                 -34.8987      5.223     -6.682      0.000     -45.136     -24.661\n",
       "person_capacity               29.3627      1.221     24.043      0.000      26.969      31.756\n",
       "host_is_superhost             -0.9209      2.706     -0.340      0.734      -6.226       4.384\n",
       "multi                         20.7091      2.836      7.303      0.000      15.151      26.267\n",
       "biz                           38.0871      2.890     13.180      0.000      32.423      43.751\n",
       "cleanliness_rating            11.0309      1.660      6.646      0.000       7.777      14.284\n",
       "guest_satisfaction_overall     0.3191      0.182      1.750      0.080      -0.038       0.676\n",
       "bedrooms                      74.1638      2.244     33.044      0.000      69.765      78.563\n",
       "dist                          -0.2809      0.883     -0.318      0.750      -2.011       1.449\n",
       "metro_dist                    -8.2363      1.649     -4.995      0.000     -11.469      -5.004\n",
       "attr_index                    -0.1109      0.015     -7.239      0.000      -0.141      -0.081\n",
       "attr_index_norm                7.1167      0.330     21.573      0.000       6.470       7.763\n",
       "rest_index                     0.0527      0.007      7.873      0.000       0.040       0.066\n",
       "rest_index_norm               -0.5757      0.162     -3.556      0.000      -0.893      -0.258\n",
       "City_Amsterdam               258.2320      7.049     36.636      0.000     244.416     272.048\n",
       "City_Athens                 -231.2264      6.784    -34.085      0.000    -244.523    -217.930\n",
       "City_Barcelona               -29.3074      7.114     -4.120      0.000     -43.251     -15.364\n",
       "City_Berlin                  -70.2170      7.278     -9.648      0.000     -84.482     -55.953\n",
       "City_Budapest               -201.9475      5.836    -34.605      0.000    -213.386    -190.509\n",
       "City_Lisbon                 -104.4790      5.607    -18.633      0.000    -115.470     -93.488\n",
       "City_London                  -31.3151      5.922     -5.288      0.000     -42.924     -19.707\n",
       "City_Rome                   -154.2920      6.344    -24.320      0.000    -166.727    -141.857\n",
       "City_Vienna                 -123.5902      6.377    -19.380      0.000    -136.090    -111.090\n",
       "==============================================================================\n",
       "Omnibus:                    26318.654   Durbin-Watson:                   1.999\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):          5568216.397\n",
       "Skew:                           6.073   Prob(JB):                         0.00\n",
       "Kurtosis:                      79.517   Cond. No.                     4.71e+15\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The smallest eigenvalue is 7.72e-22. This might indicate that there are\n",
       "strong multicollinearity problems or that the design matrix is singular.\n",
       "\"\"\""
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "import statsmodels.api as sm\n",
    "X_train = sm.add_constant(X_train)\n",
    "X_train.head()\n",
    "nicer_OLS=sm.OLS(Y_train,X_train).fit()\n",
    "nicer_OLS.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "16db83a1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
